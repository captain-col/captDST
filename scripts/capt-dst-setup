#!/bin/bash

# Setup a directory for doing physics analysis using a DST from
# captSummary.  This can be run many times in the same directory.

# Define the command line usage.
usage() {
    cat <<EOF
$(basename $0) [options] [example-file]

Setup a working directory for an analysis reading the CAPTAIN dst.

Options:

   -h     : This help message
   
EOF
}

# Check that the tools package is setup.  It probably is already, but
# this checks just in case the script is being sourced directly.
if [ ! -d ${CAPTDSTROOT} ]; then
    echo "ERROR: The captDST package needs to be setup."
    exit 1
fi
    
# Check that root is available.
if ! which root >> /dev/null; then
    echo "ERROR: The root executable needs to be in the path."
    exit 1
fi

########################################################################
# Define the configuration variables.

# The area where the captDST software will be installed.
WORKAREA="."

# Parse the command line options.  This is posix so after its done,
# the options are sorted to the begining of the arguments.
while getopts "h" option; do
    case $option in 
	h) usage; exit 0;;
    esac
done

echo "Setup Data Summary Tree Tools"

# Shift the options off the stack.
shift $((OPTIND-1))

# Get the example file name
if [ ${#1} = 0 ]; then
    usage
    echo "ERROR: An example DST file must be provided."
    exit 1
fi
EXAMPLE_FILE=$1
shift

# Make sure the example file exists.
if [ ! -f ${EXAMPLE_FILE} ]; then
    usage
    echo "ERROR: The example DST file does not exist."
    exit 1
fi

# Go to wherever the use work area is.
cd ${WORKAREA}

# Build the project directory.  This will delete all of the files in
# the captDST subdirectory so this is a clean installation.
cat > captDSTSetup.C <<EOF
{
// Auto-generated file used to build the captDST subdirectory which can
// be deleted after the capt-dst-setup script has completed.  This file
// is generated by capt-dst-setup. 
TFile exampleFile("${EXAMPLE_FILE}");
exampleFile.MakeProject("captDST","*","recreate+");
}
EOF
root -b -q captDSTSetup.C

# Copy the package level captDST/tools files into the local captDST.
cp -v -r ${CAPTDSTROOT}/tools/* captDST/

# Cleanup any temporary files left around in the project directory.
rm captDST/*~ >> /dev/null 2>&1

# If there are any local definitions, add them to the end of the
# autogenerated captDSTProjectSource.cxx file
if [ -f captDST/captDSTLocalSource.cxx ]; then
    cat captDST/captDSTProjectSource.cxx \
	captDST/captDSTLocalSource.cxx > captDSTProjectSource.cxx
    mv captDSTProjectSource.cxx captDST/captDSTProjectSource.cxx
fi

# If there are any local definitions, add them to the end of the
# autogenerated captDSTProjectSource.cxx file
if [ -f captDST/captDSTLocalHeaders.h ]; then
    cat captDST/captDSTProjectHeaders.h \
	captDST/captDSTLocalHeaders.h > captDSTProjectHeaders.h
    mv captDSTProjectHeaders.h captDST/captDSTProjectHeaders.h
fi

# If there are any local definitions, add them to the end of the
# autogenerated captDSTProjectSource.cxx file
if [ -f captDST/captDSTLocalLinkDef.h ]; then
    cat captDST/captDSTLinkDef.h \
	captDST/captDSTLocalLinkDef.h > captDSTLinkDef.h
    mv captDSTLinkDef.h captDST/captDSTLinkDef.h
fi

# Compile it the shared library.
( cd captDST; ./MAKEP )

# Add a "do not change" message to the captDST README.
if [ -f captDST/README.captDST ]; then
    mv captDST/README.captDST captDST.temporary
fi
echo %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% > captDST/README.captDST
echo CHANGES TO FILES IN THIS DIRECTORY WILL BE LOST >> captDST/README.captDST
echo %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% >> captDST/README.captDST
echo " " >> captDST/README.captDST
if [ -f captDST.temporary ]; then
    cat captDST.temporary >> captDST/README.captDST
    rm captDST.temporary
fi

